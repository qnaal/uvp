(defun spring (k x &optional (v 0) (c 1))
  "returnes force for a damped spring-mass system"
  (- (* (- k) x)
     (* c v)))

;; (defun acceleration-constant (everyone state-lst acc-pol-lst t1)
;;   "returns constant acceleration along x-axis"
;;   (declare (ignore state-lst acc-pol-lst t1))
;;   (let ((accel-lst))
;;     (dotimes (i (length everyone) accel-lst)
;;       (push '(1/2 0) accel-lst))))

(defun acceleration (everyone state-lst acc-pol-lst t1)
  "returns everyone's acceleration"
  (declare (ignore t1 acc-pol-lst))
  (let ((force-collision-plst (collision-resolve everyone
						 (let ((pos-lst))
						   (dolist (state state-lst (nreverse pos-lst))
						     (push (car state) pos-lst)))
						 (let ((vel-lst))
						   (dolist (state state-lst (nreverse vel-lst))
						     (push (cadr state) vel-lst)))
						 *map*))
	(accel-lst))
    (dotimes (i (length everyone) accel-lst)
      (let* ((guy (nth i everyone))
	     (force-collision (or (getf force-collision-plst guy) '(0 0)))
	     (mass (attribute guy :mass))
	     (size (attribute guy :size))
	     (leg-str (attribute guy :leg-str))
	     (accelk (attribute guy :accelk))
	     (spd-max (* leg-str size (/ mass))))
	
	(destructuring-bind ((run-r run-theta)
			     (pos vel-current))
	    (list (get-run guy)
		  (nth i state-lst))
	  (declare (ignore pos))
	  (let* ((target-r (* spd-max run-r))
		 (vel-target (carterize (list target-r run-theta)))
		 (vel-diff (v- vel-current vel-target))
		 (vel-diff-pol (polarize vel-diff))
		 (vel-diff-r (car vel-diff-pol))
		 (vel-diff-theta (cadr vel-diff-pol))
		 (force-input-pol (list (spring accelk
						vel-diff-r)
					vel-diff-theta))
		 (force-input (carterize force-input-pol))
		 (force-total (v+ force-input force-collision))
		 (acc1 (v* (/ mass) force-total)))
	    (setf accel-lst (append accel-lst (list acc1)))))))))

;; (defun acceleration-dumb (everyone state-lst acc-pol-lst t1)
;;   "returns everyone's acceleration"
;;   (declare (ignore t1 state-lst acc-pol-lst))
;;   (let ((accel-lst))
;;     (dotimes (i (length everyone) accel-lst)
;;       (let* ((guy (nth i everyone))
;; 	     (acc-spd (attribute guy :acc-spd))
;; 	     (leg-str (attribute guy :leg-str))
;; 	     (mass (attribute guy :mass))
;; 	     (size (attribute guy :size))
;; 	     (spd-max (* leg-str size (/ mass)))
;; 	     (acc-max (* leg-str (/ mass)))
;; 	     (vel-current (carterize (attribute guy :vel-pol))))
;; 	(destructuring-bind (run-r run-theta)
;; 	    (get-run guy)
;; 	  (let* ((target-r (* spd-max run-r))
;; 		 (vel-target (carterize (list target-r run-theta)))
;; 		 (vel-diff (v- vel-target vel-current))
;; 		 (vel-diff-pol (polarize vel-diff))
;; 		 (acc1-pol (list (* acc-max acc-spd (/ (car vel-diff-pol)
;; 					       spd-max))
;; 				 (cadr vel-diff-pol)))
;; 		 (acc1 (carterize acc1-pol)))
;; 	    (setf accel-lst (append accel-lst (list acc1)))))))))
